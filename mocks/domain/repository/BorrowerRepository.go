// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/iqbalbachmid/billing-engine/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// BorrowerRepository is an autogenerated mock type for the BorrowerRepository type
type BorrowerRepository struct {
	mock.Mock
}

type BorrowerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *BorrowerRepository) EXPECT() *BorrowerRepository_Expecter {
	return &BorrowerRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: borrower
func (_m *BorrowerRepository) Create(borrower entity.Borrower) (int, error) {
	ret := _m.Called(borrower)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Borrower) (int, error)); ok {
		return rf(borrower)
	}
	if rf, ok := ret.Get(0).(func(entity.Borrower) int); ok {
		r0 = rf(borrower)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.Borrower) error); ok {
		r1 = rf(borrower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BorrowerRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type BorrowerRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - borrower entity.Borrower
func (_e *BorrowerRepository_Expecter) Create(borrower interface{}) *BorrowerRepository_Create_Call {
	return &BorrowerRepository_Create_Call{Call: _e.mock.On("Create", borrower)}
}

func (_c *BorrowerRepository_Create_Call) Run(run func(borrower entity.Borrower)) *BorrowerRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Borrower))
	})
	return _c
}

func (_c *BorrowerRepository_Create_Call) Return(_a0 int, _a1 error) *BorrowerRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BorrowerRepository_Create_Call) RunAndReturn(run func(entity.Borrower) (int, error)) *BorrowerRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *BorrowerRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BorrowerRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type BorrowerRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *BorrowerRepository_Expecter) Delete(id interface{}) *BorrowerRepository_Delete_Call {
	return &BorrowerRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *BorrowerRepository_Delete_Call) Run(run func(id int)) *BorrowerRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *BorrowerRepository_Delete_Call) Return(_a0 error) *BorrowerRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BorrowerRepository_Delete_Call) RunAndReturn(run func(int) error) *BorrowerRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *BorrowerRepository) GetAll() ([]entity.Borrower, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Borrower
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Borrower, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Borrower); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Borrower)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BorrowerRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type BorrowerRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *BorrowerRepository_Expecter) GetAll() *BorrowerRepository_GetAll_Call {
	return &BorrowerRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *BorrowerRepository_GetAll_Call) Run(run func()) *BorrowerRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BorrowerRepository_GetAll_Call) Return(_a0 []entity.Borrower, _a1 error) *BorrowerRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BorrowerRepository_GetAll_Call) RunAndReturn(run func() ([]entity.Borrower, error)) *BorrowerRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *BorrowerRepository) GetByID(id int) (entity.Borrower, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.Borrower
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entity.Borrower, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entity.Borrower); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Borrower)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BorrowerRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type BorrowerRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *BorrowerRepository_Expecter) GetByID(id interface{}) *BorrowerRepository_GetByID_Call {
	return &BorrowerRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *BorrowerRepository_GetByID_Call) Run(run func(id int)) *BorrowerRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *BorrowerRepository_GetByID_Call) Return(_a0 entity.Borrower, _a1 error) *BorrowerRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BorrowerRepository_GetByID_Call) RunAndReturn(run func(int) (entity.Borrower, error)) *BorrowerRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: borrower
func (_m *BorrowerRepository) Update(borrower entity.Borrower) error {
	ret := _m.Called(borrower)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Borrower) error); ok {
		r0 = rf(borrower)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BorrowerRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type BorrowerRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - borrower entity.Borrower
func (_e *BorrowerRepository_Expecter) Update(borrower interface{}) *BorrowerRepository_Update_Call {
	return &BorrowerRepository_Update_Call{Call: _e.mock.On("Update", borrower)}
}

func (_c *BorrowerRepository_Update_Call) Run(run func(borrower entity.Borrower)) *BorrowerRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Borrower))
	})
	return _c
}

func (_c *BorrowerRepository_Update_Call) Return(_a0 error) *BorrowerRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BorrowerRepository_Update_Call) RunAndReturn(run func(entity.Borrower) error) *BorrowerRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewBorrowerRepository creates a new instance of BorrowerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBorrowerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BorrowerRepository {
	mock := &BorrowerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
