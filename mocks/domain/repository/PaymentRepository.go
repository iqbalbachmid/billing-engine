// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/iqbalbachmid/billing-engine/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

type PaymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentRepository) EXPECT() *PaymentRepository_Expecter {
	return &PaymentRepository_Expecter{mock: &_m.Mock}
}

// CreatePaymentAndUpdateLoanSchedules provides a mock function with given fields: payment, loanSchedules
func (_m *PaymentRepository) CreatePaymentAndUpdateLoanSchedules(payment entity.Payment, loanSchedules []entity.LoanSchedule) (int, error) {
	ret := _m.Called(payment, loanSchedules)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentAndUpdateLoanSchedules")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Payment, []entity.LoanSchedule) (int, error)); ok {
		return rf(payment, loanSchedules)
	}
	if rf, ok := ret.Get(0).(func(entity.Payment, []entity.LoanSchedule) int); ok {
		r0 = rf(payment, loanSchedules)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.Payment, []entity.LoanSchedule) error); ok {
		r1 = rf(payment, loanSchedules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentAndUpdateLoanSchedules'
type PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call struct {
	*mock.Call
}

// CreatePaymentAndUpdateLoanSchedules is a helper method to define mock.On call
//   - payment entity.Payment
//   - loanSchedules []entity.LoanSchedule
func (_e *PaymentRepository_Expecter) CreatePaymentAndUpdateLoanSchedules(payment interface{}, loanSchedules interface{}) *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call {
	return &PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call{Call: _e.mock.On("CreatePaymentAndUpdateLoanSchedules", payment, loanSchedules)}
}

func (_c *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call) Run(run func(payment entity.Payment, loanSchedules []entity.LoanSchedule)) *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Payment), args[1].([]entity.LoanSchedule))
	})
	return _c
}

func (_c *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call) Return(_a0 int, _a1 error) *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call) RunAndReturn(run func(entity.Payment, []entity.LoanSchedule) (int, error)) *PaymentRepository_CreatePaymentAndUpdateLoanSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLoanID provides a mock function with given fields: loanID
func (_m *PaymentRepository) GetByLoanID(loanID int) ([]entity.Payment, error) {
	ret := _m.Called(loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetByLoanID")
	}

	var r0 []entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entity.Payment, error)); ok {
		return rf(loanID)
	}
	if rf, ok := ret.Get(0).(func(int) []entity.Payment); ok {
		r0 = rf(loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentRepository_GetByLoanID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLoanID'
type PaymentRepository_GetByLoanID_Call struct {
	*mock.Call
}

// GetByLoanID is a helper method to define mock.On call
//   - loanID int
func (_e *PaymentRepository_Expecter) GetByLoanID(loanID interface{}) *PaymentRepository_GetByLoanID_Call {
	return &PaymentRepository_GetByLoanID_Call{Call: _e.mock.On("GetByLoanID", loanID)}
}

func (_c *PaymentRepository_GetByLoanID_Call) Run(run func(loanID int)) *PaymentRepository_GetByLoanID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *PaymentRepository_GetByLoanID_Call) Return(_a0 []entity.Payment, _a1 error) *PaymentRepository_GetByLoanID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentRepository_GetByLoanID_Call) RunAndReturn(run func(int) ([]entity.Payment, error)) *PaymentRepository_GetByLoanID_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentRepository creates a new instance of PaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentRepository {
	mock := &PaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
