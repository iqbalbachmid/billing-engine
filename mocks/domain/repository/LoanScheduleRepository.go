// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/iqbalbachmid/billing-engine/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// LoanScheduleRepository is an autogenerated mock type for the LoanScheduleRepository type
type LoanScheduleRepository struct {
	mock.Mock
}

type LoanScheduleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LoanScheduleRepository) EXPECT() *LoanScheduleRepository_Expecter {
	return &LoanScheduleRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: schedule
func (_m *LoanScheduleRepository) Create(schedule entity.LoanSchedule) (int, error) {
	ret := _m.Called(schedule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.LoanSchedule) (int, error)); ok {
		return rf(schedule)
	}
	if rf, ok := ret.Get(0).(func(entity.LoanSchedule) int); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.LoanSchedule) error); ok {
		r1 = rf(schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoanScheduleRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type LoanScheduleRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - schedule entity.LoanSchedule
func (_e *LoanScheduleRepository_Expecter) Create(schedule interface{}) *LoanScheduleRepository_Create_Call {
	return &LoanScheduleRepository_Create_Call{Call: _e.mock.On("Create", schedule)}
}

func (_c *LoanScheduleRepository_Create_Call) Run(run func(schedule entity.LoanSchedule)) *LoanScheduleRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.LoanSchedule))
	})
	return _c
}

func (_c *LoanScheduleRepository_Create_Call) Return(_a0 int, _a1 error) *LoanScheduleRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoanScheduleRepository_Create_Call) RunAndReturn(run func(entity.LoanSchedule) (int, error)) *LoanScheduleRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByLoanID provides a mock function with given fields: loanID
func (_m *LoanScheduleRepository) GetByLoanID(loanID int) ([]entity.LoanSchedule, error) {
	ret := _m.Called(loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetByLoanID")
	}

	var r0 []entity.LoanSchedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entity.LoanSchedule, error)); ok {
		return rf(loanID)
	}
	if rf, ok := ret.Get(0).(func(int) []entity.LoanSchedule); ok {
		r0 = rf(loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanSchedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoanScheduleRepository_GetByLoanID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLoanID'
type LoanScheduleRepository_GetByLoanID_Call struct {
	*mock.Call
}

// GetByLoanID is a helper method to define mock.On call
//   - loanID int
func (_e *LoanScheduleRepository_Expecter) GetByLoanID(loanID interface{}) *LoanScheduleRepository_GetByLoanID_Call {
	return &LoanScheduleRepository_GetByLoanID_Call{Call: _e.mock.On("GetByLoanID", loanID)}
}

func (_c *LoanScheduleRepository_GetByLoanID_Call) Run(run func(loanID int)) *LoanScheduleRepository_GetByLoanID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *LoanScheduleRepository_GetByLoanID_Call) Return(_a0 []entity.LoanSchedule, _a1 error) *LoanScheduleRepository_GetByLoanID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoanScheduleRepository_GetByLoanID_Call) RunAndReturn(run func(int) ([]entity.LoanSchedule, error)) *LoanScheduleRepository_GetByLoanID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: schedule
func (_m *LoanScheduleRepository) Update(schedule entity.LoanSchedule) error {
	ret := _m.Called(schedule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.LoanSchedule) error); ok {
		r0 = rf(schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanScheduleRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type LoanScheduleRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - schedule entity.LoanSchedule
func (_e *LoanScheduleRepository_Expecter) Update(schedule interface{}) *LoanScheduleRepository_Update_Call {
	return &LoanScheduleRepository_Update_Call{Call: _e.mock.On("Update", schedule)}
}

func (_c *LoanScheduleRepository_Update_Call) Run(run func(schedule entity.LoanSchedule)) *LoanScheduleRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.LoanSchedule))
	})
	return _c
}

func (_c *LoanScheduleRepository_Update_Call) Return(_a0 error) *LoanScheduleRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoanScheduleRepository_Update_Call) RunAndReturn(run func(entity.LoanSchedule) error) *LoanScheduleRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoanScheduleRepository creates a new instance of LoanScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanScheduleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanScheduleRepository {
	mock := &LoanScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
